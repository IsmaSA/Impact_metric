
# Ismael Soto

suppressMessages({
  library(dplyr, quiet = TRUE, warn.conflicts = FALSE)
  library(reshape, quiet = TRUE, warn.conflicts = FALSE)
  library(tidyr)  
  library(stringr)
  library(raster)
  library(xlsx)
  library(countrycode)
  library(readxl)
  library(rgbif)
  library(sdm)
  library(raster)
  library(usdm)
  library(dismo)
  library(sf)
  library(writexl)
  library(rgdal)
  library(devtools)
  Sys.setenv(LANGUAGE = "en")
})



n <- "Solenopsis_geminata"
keys <- tibble(Species = character(), key = integer())
#for (n in spn) {
  sp <- occ_data(scientificName = n, hasCoordinate = TRUE, occurrenceStatus = "PRESENT",
                 limit = 5)
  sp <- sp[["data"]]
  
  if (nrow(sp) > 0) {
    key <- sp$taxonKey[1]
  } else {
    key <- NA
  }
  
  keys <- rbind(keys, tibble(Species = n, key = key))
  cat(n, "Extracted\n")
#}

unique(keys$Species)

sp <- unique(keys$key)
s<- sp[1]
dois <- tibble(Species = character(), DOI = character())
#for(s in sp){
  x = occ_download(
    pred_in("basisOfRecord", c("MACHINE_OBSERVATION", "HUMAN_OBSERVATION")),
    pred_in("taxonKey", s),
    pred_and(pred_gte("year", 1960), pred_lte("year", 2023)),
    pred("hasCoordinate", TRUE),
    pred_lte("coordinateUncertaintyInMeters", 9999), 
    user = "ismaelsoto",
    pwd = "Ismaputas123.",
    email = "isma-sa@hotmail.com"
  )
  status <- occ_download_meta(x)$status
  
  while(status != "SUCCEEDED") {
    Sys.sleep(15) 
    status <- occ_download_meta(x)$status
  }
  
  z <- occ_download_meta(x)
  doi2 <- z$doi 
  dois <- rbind(dois, tibble(Species = s, DOI = doi2))
  cat(s, "downloaded\n")
  #}


colnames(dois)[1] = "key"
p <-dois %>% left_join(keys, by ="key" )  

# see download data
dat <- occ_download_get('0002900-240216155721649') %>%
  occ_download_import()

names(dat)
world_map <- map_data("world")

# Plot data
ggplot() +
  geom_polygon(data = world_map, aes(x = long, y = lat, group = group), fill = "lightgray", color = "grey8") +
  geom_point(data = dat, aes(x = decimalLongitude, y = decimalLatitude), color = "red", size = 1.2) +
  theme_bw() +
  labs(x = "Longitude", y = "Latitude")

# Place GBIF records in GRID ----
bio <- raster::getData('worldclim', var='bio', res=5)

grid_extent <- extent(-180, 180, -60, 90)  

#Grid
grid <- raster(grid_extent, res = 0.08333333)

grid_count <- raster(grid)

occ_points <- sp::SpatialPoints(data.frame(lon = dat$decimalLongitude, 
                                           lat = dat$decimalLatitude))
grid_count <- rasterize(occ_points, grid_count, fun = 'count')

# Remove NA values and create a frequency table of the counts
freq_table <- freq(grid_count, useNA='no') %>%
  as.data.frame() %>%
  filter(value > 0) 

if (max(freq_table$value) > 1) {
  cat("Unfortunately we are more fucked than the student of Paride, thus need to clean the data")
}

# clean process --
dat$ID <- 1:nrow(dat)

valid_cells <- sum(!is.na(grid_count[]))

ids <- rep(NA, ncell(grid_count))

ids[!is.na(grid_count[])] <- 1:valid_cells

grid_count[] <- ids

raster_cells<- grid_count@data@values %>% as.data.frame()

cell_ids <- extract(grid_count, occ_points)

point_counts_per_cell <- as.data.frame(table(cell_ids))
colnames(point_counts_per_cell) <- c("Cell_ID", "Count")

points_df <- as.data.frame(occ_points)
points_df$Cell_ID <- extract(grid_count, occ_points, cellnumbers=TRUE)[,1]

names(points_df)
names(point_counts_per_cell)

points_df$Cell_ID <- as.character(points_df$Cell_ID)
point_counts_per_cell$Cell_ID <- as.character(point_counts_per_cell$Cell_ID)

points_with_cell_ids <- points_df %>%
  left_join(point_counts_per_cell, by = "Cell_ID")

#select just one point:
unique_points_per_cell <- points_with_cell_ids %>%
  group_by(Cell_ID) %>%
  slice(1) %>%
  ungroup()

if(valid_cells == nrow(unique_points_per_cell)) {
  cat("congrats we retained just one point per cell")
} else {
  cat("you are useless, make it again")
}


## basic SDM ----

unique_points_per_cell$species <- n
spg <- unique_points_per_cell[, c("lon", "lat","species")]

coordinates(spg) <- ~lon+lat
proj4string(spg) <- CRS("+proj=longlat +datum=WGS84")


ex <- raster::extract(bio,spg)
head(ex)
v <- vifstep(ex)

#vifcor
v
bioc <- exclude(bio, v)

spg$species <- 1
d <- sdmData(species~., spg, predictors= bioc, bg = list(method='gRandom',n=10000))
d

getmethodNames()
m <- sdm(species~., d, methods=c('glm','gam','rf'), replication=c('sub'),
         test.p=30,n=5, parallelSetting=list(ncore=4,method='parallel'))






